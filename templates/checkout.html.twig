{% extends "master.html.twig" %}
{% block title %}Cart
{% endblock %}

{% block addHead %}
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://js.stripe.com/v3/"></script>
<script>
var items = [];
	function refreshList() {
		$.ajax({url: '/api/cart',
		type: 'GET',
		dataType: 'json',
		statusCode: {
			403: function() {
				$('#calculations').hide();
				alert("Authentication failed");
			},
			404: function() {
			// $('#calculations').addClass("invisible");
				$('#placeOrder').html(``);
				$("#cartItems").html("No items in your cart!");
			}
		},
		}
		).done(function (list) {
			var total = 0;
			var tbody = `<table><tr><th>Img</th><th>Name</th><th>Description</th><th>Quantity</th><th>Price</th></tr>`;
			for (var i = 0; i < list.length; i++) {
			var item = list[i];
			items.push({id: item.food_id})
			total += Number(item.price);
			tbody += `<tr id="${item.food_id}-${item.user_id}">`
			tbody += '<td><img style="object-fit: scale-down;" width=100 height=100 src="' + item.imageFilePath + '"/></td>';
			tbody += '<td>' + item.name + '</td>';
			tbody += '<td>' + item.description + '</td>';
			tbody += `<td>
					<div id="quantity-${item.food_id}-${item.user_id}">${item.quantity}</div>
				</td>`;
			tbody += '<td>' + item.price + '</td>';
			tbody += `</tr></table>`;
			}
			$("#cartItems").html(tbody);
			$("#subTotal").html('$' + total.toFixed(2));
			$("#totalCost").html('$' + ((total + 10) * 1.15).toFixed(2));
			$('#calculations').removeClass("invisible");
			initialize(items);
		});
	}
	$(document).ready(function () {
		refreshList();
	});
</script>
{% endblock %}
	
{% block content %}
	<div class="container">
	   <h2>Shopping Cart</h2>
	  <div class="container mt-3" id="cartItems">
	
	</div>
	    <div class="container mt-3">
		<div id="calculations" class="invisible d-grid">
			<div class="row">
				<div class="col">Subtotal:</div>
				<div id="subTotal" class="col">15%</div>
			</div>			
			<div class="row">
				<div class="col">Delivery Fee:</div>
				<div class="col">$10</div>
			</div>
			<div class="row">
				<div class="col">Tax:</div>
				<div class="col">15%</div>
			</div>
			<div class="row">
				<div class="col">Total:</div>
				<div id="totalCost" class="col">15%</div>
			</div>			
		</div>
	    <form id="payment-form">
    	  <div id="payment-element">
    	    <!--Stripe.js injects the Payment Element-->
    	  </div>
    	  <button id="submit">
    	    <div class="spinner hidden" id="spinner"></div>
    	    <span id="button-text">Pay now</span>
    	  </button>
    	  <div id="payment-message" class="hidden"></div>
    	</form>
	    </div>
	</div>
{% endblock %}
{% block endScript %}
<script>
	// A reference to Stripe.js initialized with a fake API key.
	const stripe = Stripe("pk_test_51Jv6wCLkqYXs25lQ7H0XQiXS2G1i8J9D6LsP5a43MXoHKkxBlVZyAqz0DDmOCv9Ck0CGsBfdNl3daBbuWWfimcP500iMsOku7p");
	
	// The items the customer wants to buy	
	let elements;
	checkStatus();
	
	document
	  .querySelector("#payment-form")
	  .addEventListener("submit", handleSubmit);
	
	// Fetches a payment intent and captures the client secret
	async function initialize(itemList) {
	  const { clientSecret } = await fetch("/api/create-stripe", {
	    method: "POST",
	    headers: { "Content-Type": "application/json" },
	    body: JSON.stringify({ items: itemList }),
	  }).then((r) => r.json());
	
	  elements = stripe.elements({ clientSecret });
	
	  const paymentElement = elements.create("payment");
	  paymentElement.mount("#payment-element");
	}
	
	async function handleSubmit(e) {
	  e.preventDefault();
	  setLoading(true);
	
	  const { error } = await stripe.confirmPayment({
	    elements,
	    confirmParams: {
	      // Make sure to change this to your payment completion page
	      return_url: "http://delivereats/checkout-success",
	    },
	  });
	
	  // This point will only be reached if there is an immediate error when
	  // confirming the payment. Otherwise, your customer will be redirected to
	  // your `return_url`. For some payment methods like iDEAL, your customer will
	  // be redirected to an intermediate site first to authorize the payment, then
	  // redirected to the `return_url`.
	  if (error.type === "card_error" || error.type === "validation_error") {
	    showMessage(error.message);
	  } else {
	    showMessage("An unexpected error occured.");
	  }
	
	  setLoading(false);
	}
	
	// Fetches the payment intent status after payment submission
	async function checkStatus() {
	  const clientSecret = new URLSearchParams(window.location.search).get(
	    "payment_intent_client_secret"
	  );
	
	  if (!clientSecret) {
	    return;
	  }
	
	  const { paymentIntent } = await stripe.retrievePaymentIntent(clientSecret);
	
	  switch (paymentIntent.status) {
	    case "succeeded":
	      showMessage("Payment succeeded!");
	      break;
	    case "processing":
	      showMessage("Your payment is processing.");
	      break;
	    case "requires_payment_method":
	      showMessage("Your payment was not successful, please try again.");
	      break;
	    default:
	      showMessage("Something went wrong.");
	      break;
	  }
	}
	
	// ------- UI helpers -------
	
	function showMessage(messageText) {
	  const messageContainer = document.querySelector("#payment-message");
	
	  messageContainer.classList.remove("hidden");
	  messageContainer.textContent = messageText;
	
	  setTimeout(function () {
	    messageContainer.classList.add("hidden");
	    messageText.textContent = "";
	  }, 4000);
	}
	
	// Show a spinner on payment submission
	function setLoading(isLoading) {
	  if (isLoading) {
	    // Disable the button and show a spinner
	    document.querySelector("#submit").disabled = true;
	    document.querySelector("#spinner").classList.remove("hidden");
	    document.querySelector("#button-text").classList.add("hidden");
	  } else {
	    document.querySelector("#submit").disabled = false;
	    document.querySelector("#spinner").classList.add("hidden");
	    document.querySelector("#button-text").classList.remove("hidden");
	  }
	}
	
	
	</script>
{% endblock %}
